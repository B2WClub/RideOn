rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ───── Helper Functions ─────
    function isSignedIn() {
      return request.auth != null;
    }

    function isAppAdmin() {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isTeamAdminOrAdmin() {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['team_admin', 'admin'];
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isSameTeam(userId) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        exists(/databases/$(database)/documents/users/$(userId)) &&
        getUserData().teamId == get(/databases/$(database)/documents/users/$(userId)).data.teamId;
    }

    function isTeamMember(teamId) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().teamId == teamId;
    }

    function isTeamAdmin(teamId) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().teamId == teamId &&
        getUserData().role == 'team_admin';
    }

    function isValidUserDocument() {
      return request.resource.data.userId == request.auth.uid &&
        request.resource.data.email == request.auth.token.email &&
        request.resource.data.role in ['user', 'team_admin', 'admin'] &&
        request.resource.data.userName is string &&
        request.resource.data.userName.size() >= 3 &&
        request.resource.data.userName.size() <= 30 &&
        request.resource.data.totalMiles == 0;
    }

    function isValidMileLog() {
      return request.resource.data.userId == request.auth.uid &&
        request.resource.data.miles is number &&
        request.resource.data.miles > 0 &&
        request.resource.data.miles <= 1000 &&
        request.resource.data.date is string &&
        request.resource.data.date.matches('^\\d{4}-\\d{2}-\\d{2}$');
    }

    function isInvited(email) {
      return exists(/databases/$(database)/documents/invitations/$(email)) &&
        get(/databases/$(database)/documents/invitations/$(email)).data.used == false &&
        get(/databases/$(database)/documents/invitations/$(email)).data.expiresAt > request.time;
    }

    function isInvitedToCreateTeam(email) {
      return isInvited(email) &&
        get(/databases/$(database)/documents/invitations/$(email)).data.role in ['admin', 'team_admin'];
    }

    function hasValidTeamStructure() {
      return request.resource.data.keys().hasAll(['name', 'description', 'adminIds', 'memberIds', 'memberCount', 'totalMiles', 'totalRides']) &&
        request.resource.data.adminIds is list &&
        request.resource.data.memberIds is list &&
        request.resource.data.adminIds.size() >= 1 &&
        request.resource.data.memberIds.size() >= 1 &&
        request.resource.data.memberCount == request.resource.data.memberIds.size() &&
        request.resource.data.totalMiles == 0 &&
        request.resource.data.totalRides == 0;
    }

    // ───── Users ─────
    match /users/{userId} {
      // Allow reading single user document
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow get: if isAppAdmin();
      allow get: if isTeamAdminOrAdmin() && isSameTeam(userId);
      
      // Allow listing users for admins
      allow list: if isAppAdmin() && request.query.limit <= 100;
      // Allow team admins to list users (they can only see their team members in practice)
      allow list: if isTeamAdminOrAdmin();

      // Allow creating user during registration
      allow create: if isSignedIn() && 
        request.auth.uid == userId && 
        isValidUserDocument() && 
        isInvited(request.auth.token.email);

      // Allow users to update specific fields of their own profile
      allow update: if isSignedIn() &&
        request.auth.uid == userId &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['userName', 'profileImage', 'bio']) &&
        (!("userName" in request.resource.data) || 
          (request.resource.data.userName.size() >= 3 &&
          request.resource.data.userName.size() <= 30));

      // Allow team admins to update users on same team (but not their own role)
      allow update: if isTeamAdminOrAdmin() && 
        isSameTeam(userId) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role', 'teamId', 'teamName']) &&
        request.resource.data.role in ['user', 'team_admin'] &&
        userId != request.auth.uid;

      // Allow app admins full update access
      allow update: if isAppAdmin();
      
      // Prevent deletion
      allow delete: if false;
    }

    // ───── Usernames ─────
    match /usernames/{username} {
      // Allow checking if username exists
      allow get: if true;
      
      // Allow creating username during registration with timestamp validation
      allow create: if isSignedIn() &&
        isInvited(request.auth.token.email) &&
        request.resource.data.keys().hasOnly(['userId', 'createdAt']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.createdAt == request.time &&
        username.matches('^[a-zA-Z0-9_]{3,30}$');

      // Allow users to delete their own username
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isAppAdmin();
      
      // Prevent updates
      allow update: if false;
    }

    // ───── Teams ─────
    match /teams/{teamId} {
      // Allow reading teams
      allow get: if true;
      allow get: if isAppAdmin();
      allow get: if isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
      
      // Allow listing teams for admins with query limits
      allow list: if isAppAdmin() && request.query.limit <= 100;
      allow list: if isTeamAdminOrAdmin() && request.query.limit <= 100;

      // Allow creating teams for invited admins with validation
      allow create: if isSignedIn() && 
        isInvitedToCreateTeam(request.auth.token.email) &&
        hasValidTeamStructure() &&
        request.resource.data.adminIds.hasAll([request.auth.uid]) &&
        request.resource.data.memberIds.hasAll([request.auth.uid]) &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.name.size() >= 3 &&
        request.resource.data.name.size() <= 50;

      // Allow team admins to update their team (all required fields)
      allow update: if isTeamAdmin(teamId) &&
        (!("name" in request.resource.data) || 
          (request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50));

      // Allow app admins full update access
      allow update: if isAppAdmin();

      // Prevent deletion
      allow delete: if false;
    }

    // ───── Invitations ─────
    match /invitations/{email} {
      // Only the invited email can read their invitation
      allow get: if (request.auth != null && request.auth.token.email == email) || isAppAdmin();
      
      // Allow listing for admins with query limits
      allow list: if isAppAdmin();
      allow list: if isTeamAdminOrAdmin();

      // Allow user to mark their invitation as used with validation
      allow update: if isSignedIn() &&
        request.auth.token.email == email &&
        resource.data.used == false &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['used', 'usedAt']) &&
        request.resource.data.used == true &&
        request.resource.data.usedAt == request.time;

      // Allow admins to create invitations with validation
      allow create: if isTeamAdminOrAdmin() &&
        request.resource.data.keys().hasAll(['email', 'role', 'teamId', 'invitedBy', 'createdAt', 'expiresAt', 'used']) &&
        request.resource.data.invitedBy == request.auth.uid &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.used == false &&
        request.resource.data.expiresAt > request.time;

      // Allow deletion by creator or app admin
      allow delete: if isAppAdmin() || 
        (isTeamAdminOrAdmin() && resource.data.invitedBy == request.auth.uid);
    }

    // ───── Mile Logs ─────
    match /mileLogs/{logId} {
      // Allow users to read their own logs
      allow read: if isSignedIn() && 
        request.auth.uid == resource.data.userId;
      
      // Allow listing with query limits
      allow list: if isSignedIn() && request.query.limit <= 500;
      
      // Allow app admins to read all logs with limits
      allow read: if isAppAdmin() && request.query.limit <= 1000;

      // Allow creating logs with validation and server timestamp
      allow create: if isSignedIn() && 
        isValidMileLog() &&
        request.resource.data.createdAt == request.time;

      // Allow updating/deleting own logs within 30 days (as original)
      allow update, delete: if isSignedIn() &&
        resource.data.userId == request.auth.uid &&
        resource.data.createdAt.toMillis() > (request.time.toMillis() - 2592000000);
    }

    // ───── Admin Collections ─────
    match /leaderboards/{doc} {
      allow read: if isSignedIn();
      allow write: if isAppAdmin();
    }

    match /competitions/{doc} {
      allow read: if isSignedIn();
      allow write: if isAppAdmin();
    }

    match /appConfig/{doc} {
      allow read: if isSignedIn();
      allow write: if isAppAdmin();
    }

    match /auditLogs/{doc} {
      allow read: if isAppAdmin();
      allow write: if false;
    }

    match /system/{doc} {
      allow read, write: if isAppAdmin();
    }

    // ───── Catch-all ─────
    match /{document=**} {
      allow read, write: if false;
    }
  }
}